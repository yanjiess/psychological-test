import requests
import matplotlib.pyplot as plt
import sqlite3
from lxml import etree
import json
import hashlib


headers = {
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,'
              'image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'accept-encoding': 'gzip, deflate, br',
    'cache-control': 'no-cache',
    'sec-ch-ua-mobile': '?0',
    'sec-fetch-dest': 'document',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-site': 'none',
    'sec-fetch-user': '?1',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '
                  '(KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36 Edg/92.0.902.84',
}

conn = sqlite3.connect("answer.db")



def init_db():
    cursor = conn.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS ANSWER(
           MD5           CHAR(255)    PRIMARY KEY NOT NULL,
           RESULT            TEXT     NOT NULL,
           REVIEWS        TEXT
        );""")
    cursor.close()
    conn.commit()


def get_question():
    print("download questions....")

    url = "https://www.personalitytestfree.net/free-communication-test.php"
    resp = requests.get(url, headers=headers)
    selector = etree.HTML(resp.text)
    items = []
    for tr in selector.xpath("//table/tr")[1:-1]:
        td = tr.xpath('./td')
        items.append({
            "id": td[1].xpath("./input/@name")[0],
            "question": td[0].xpath('string(.)').strip()
        })

    return items


def parse_question(answer):
    answer_md5 = hashlib.md5(json.dumps(answer).encode("utf-8")).hexdigest()
    cursor = conn.cursor()
    cursor.execute("""SELECT 1 FROM answer WHERE MD5='%s'""" % answer_md5)
    if cursor.fetchone():
        cursor.execute("""SELECT result, reviews FROM answer WHERE MD5='%s'""" % answer_md5)
        result, review = cursor.fetchone()
    else:
        url = "https://www.personalitytestfree.net/free-communication-test-results.php"
        answer["submitbutton"] = "Results of the Communication Test"
        resp = requests.post(url, headers=headers, data=answer)
        selector = etree.HTML(resp.text)
        result = selector.xpath('string(.//h4[@class="profil"])')
        review = selector.xpath('string(.//div[@class="test-content"]/p[1])')
        cursor.execute("""INSERT INTO answer VALUES ('%s', '%s', '%s')""" % (answer_md5, result, review))
    cursor.close()
    conn.commit()
    return result, review


def main():
    init_db()

    questions = get_question()

    print("Welcome communication test".center(50, "="))
    answer = {}
    for que in questions:
        print(que["question"], end="\t")
        inputs = int(input("(1: False, 2: True)"))
        answer[que["id"]] = inputs

    result, review = parse_question(answer)

    print("result".center(50, "="))
    print("Communication test results:")
    print("\t", result)
    print()
    print("Personalized reviews:")
    print("\t", review)

    plt.bar(["False", "True"], [list(answer.values()).count(1), list(answer.values()).count(2)])
    plt.title("Distribution of options")
    plt.show()


if __name__ == '__main__':
    main()
